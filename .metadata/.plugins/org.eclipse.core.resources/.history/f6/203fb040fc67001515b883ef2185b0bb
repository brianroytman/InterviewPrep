

public class BST {
	private BSTNode rootNode;
	
	//constructor
	public BST() {
		rootNode = null;
	}
	
	//check if empty, either true or false
	public boolean isTreeEmpty() {
		return rootNode == null;
	}
	
	//insert data to nodes
	public void insert(int data) {
		rootNode = insert(rootNode, data);
	}
	
	//insert recursively
	public BSTNode insert(BSTNode node, int data) {
		
		if (node == null) {
			node = new BSTNode(data);
		}
		else {
			if (data <= node.getData()) {
				node.left = insert(node.left, data);
			}
			else {
				node.right = insert(node.right, data);
			}
		}
		
		return node;
		
	}
	
	
	//delete nodes
	public void delete(int n) {
		if (isEmpty()) {
			System.out.println("Tree is empty");
			
		}
		else if (search(n) == false) {
			System.out.println("Could not find node" + n);
			
		}
		else {
			root = delete(root, n);
			System.out.println("Node " + n + " has been removed.");
			
		}
	}
	
	//delete recursively
	public BSTNode delete(BSTNode root, int n) {
		BSTNode temp1, temp2, x;
		
		if (root.getData() == n) {
			BSTNode lNode, rNode;
			lNode = root.getLeftNode();
			rNode = root.getRightNode();
			if (lNode == null && rNode == null) {
				return null;
			}
			else if (lNode == null) {
				temp1 = rNode;
				return x;
			}
			else if (rNode == null) {
				temp1 = lNode;
				return x;
			}
			else {
				temp2 = rNode;
				temp1 = lNode;
				while (temp1.getLeftNode() != null) {
					temp1 = temp1.getLeftNode();
				}
				temp1 = setLeftNode(lNode);
				return temp2;
				
			}
		}
		
		if (n < root.getData()) {
			n = delete(root.getLeftNode(), n);
			
		}
	}
}
